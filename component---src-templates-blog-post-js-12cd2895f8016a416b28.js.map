{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/layout.js","webpack:///./src/components/head.js"],"names":["BlogPostTemplate","render","highlightedMarkup","post","this","props","data","markdownRemark","siteTitle","site","siteMetadata","title","_this$props$pageConte","pageContext","previous","next","frontmatter","markup","Prism","highlight","languages","react_default","a","createElement","layout","location","head","description","excerpt","dangerouslySetInnerHTML","__html","className","style","display","flexWrap","justifyContent","listStyle","padding","gatsby_browser_entry","to","fields","slug","rel","React","Component","pageQuery","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","createContext","Consumer","staticQueryData","query","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Layout","header","_this$props","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","boxShadow","textDecoration","color","SEO","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","bodyAttributes","class","titleTemplate","name","content","concat","length","join","href","withPrefix","data-prism","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf"],"mappings":"qLA2BA,kECnBMA,4FACJC,kBACE,IAGIC,EAHEC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKG,KAAKC,aAAaC,MAF7CC,EAGoBR,KAAKC,MAAMQ,YAA9BC,EAHDF,EAGCE,SAAUC,EAHXH,EAGWG,KAYlB,OATEb,EADEC,EAAKa,YAAYC,OACCC,IAAMC,UACxBhB,EAAKa,YAAYC,OACjBC,IAAME,UAAUH,OAChB,UAGkB,GAIpBI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAUrB,KAAKC,MAAMoB,SAAUd,MAAOH,GAC5Ca,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKf,MAAOR,EAAKa,YAAYL,MAAOgB,YAAaxB,EAAKyB,UACtDP,EAAAC,EAAAC,cAAA,UAAKpB,EAAKa,YAAYL,OACtBU,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKM,wBAAyB,CAAEC,OAAQ3B,EAAKa,YAAYC,UACzDI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QACEQ,UAAU,kBACVF,wBAAyB,CAAEC,OAAQ5B,MAGvCmB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,MACES,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXhB,EAAAC,EAAAC,cAAA,UACGT,GACCO,EAAAC,EAAAC,cAACe,EAAA,KAAD,CAAMC,GAAIzB,EAAS0B,OAAOC,KAAMC,IAAI,QAApC,KACK5B,EAASE,YAAYL,QAI9BU,EAAAC,EAAAC,cAAA,UACGR,GACCM,EAAAC,EAAAC,cAACe,EAAA,KAAD,CAAMC,GAAIxB,EAAKyB,OAAOC,KAAMC,IAAI,QAC7B3B,EAAKC,YAAYL,MADpB,aAhDiBgC,IAAMC,WA6DxBC,GAFE7C,YAEO,gDCrEtB8C,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,uCAAAG,IAAAL,EAAAG,EAAAD,EAAA,gCAAAI,IAAA,IAAAC,EAAAP,EAAA,GAAAQ,EAAAR,EAAAS,EAAAF,GAAAG,EAAAV,EAAA,GAAAW,EAAAX,EAAAS,EAAAC,GAAAE,EAAAZ,EAAA,KAAAa,EAAAb,EAAAS,EAAAG,GAAAZ,EAAAG,EAAAD,EAAA,yBAAAW,EAAArC,IAAAwB,EAAAG,EAAAD,EAAA,+BAAAU,EAAA,aAAAZ,EAAAG,EAAAD,EAAA,6BAAAU,EAAA,WAAAZ,EAAAG,EAAAD,EAAA,yBAAAU,EAAA,OAAAZ,EAAAG,EAAAD,EAAA,4BAAAU,EAAA,UAAAZ,EAAAG,EAAAD,EAAA,+BAAAU,EAAA,iBAAAE,EAAAd,EAAA,KAAAe,EAAAf,EAAAS,EAAAK,GAAAd,EAAAG,EAAAD,EAAA,iCAAAa,EAAAvC,IAAA,IAAAwC,EAAAhB,EAAA,IAAAA,EAAAG,EAAAD,EAAA,8BAAAc,EAAA,IAYA,IAAMX,EAAqBR,IAAMoB,cAAc,IAEzCX,EAAc,SAAA/C,GAAK,OACvBiD,EAAAhC,EAAAC,cAAC4B,EAAmBa,SAApB,KACG,SAAAC,GACC,OACE5D,EAAMC,MACL2D,EAAgB5D,EAAM6D,QAAUD,EAAgB5D,EAAM6D,OAAO5D,MAEtDD,EAAMJ,QAAUI,EAAM8D,UAC5B9D,EAAMC,KAAOD,EAAMC,KAAKA,KAAO2D,EAAgB5D,EAAM6D,OAAO5D,MAGvDgD,EAAAhC,EAAAC,cAAA,uCAaf,SAAS2B,IACP,MAAM,IAAIkB,MACR,gVATJhB,EAAYiB,UAAY,CACtB/D,KAAMgE,IAAUC,OAChBL,MAAOI,IAAUE,OAAOC,WACxBxE,OAAQqE,IAAUI,KAClBP,SAAUG,IAAUI,2BCnCtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAAC,GAAkB,IAAfxD,EAAewD,EAAfxD,SACpByD,EAAgBC,UAAOC,4BAA4B3D,EAAS4D,UAClE,OAAO1C,IAAMpB,cAAc+D,IAApBC,OAAAC,OAAA,CACL/D,WACAyD,iBACGA,EAAcO,QAIrBT,EAAiBX,UAAY,CAC3B5C,SAAU6C,IAAUoB,MAAM,CACxBL,SAAUf,IAAUE,OAAOC,aAC1BA,YAGUO,2FClBTW,4FACJ1F,kBAAS,IAGH2F,EAHGC,EAC+BzF,KAAKC,MAAnCoB,EADDoE,EACCpE,SAAUd,EADXkF,EACWlF,MAAOwD,EADlB0B,EACkB1B,SA0BzB,OArBEyB,EAJY,MAGVnE,EAAS4D,SAETS,EAAAxE,EAAAC,cAAA,UACEuE,EAAAxE,EAAAC,cAACwE,EAAA,KAAD,CAAMxD,GAAI,KAAM5B,IAKlBmF,EAAAxE,EAAAC,cAAA,UACEuE,EAAAxE,EAAAC,cAACwE,EAAA,KAAD,CACE/D,MAAO,CACLgE,UAAW,OACXC,eAAgB,OAChBC,MAAO,WAET3D,GAAI,KAEH5B,IAMPmF,EAAAxE,EAAAC,cAAA,WACGqE,EACAzB,OA/BYxB,IAAMC,WAqCZ+C,gHCnCf,SAASQ,EAATlB,GAA2D,IAA5CtD,EAA4CsD,EAA5CtD,YAAayE,EAA+BnB,EAA/BmB,KAAMC,EAAyBpB,EAAzBoB,KAAMC,EAAmBrB,EAAnBqB,SAAU3F,EAASsE,EAATtE,MAChD,OACEmF,EAAAxE,EAAAC,cAACgF,EAAA,YAAD,CACErC,MAAOsC,EACPvG,OAAQ,SAAAK,GACN,IAAMmG,EACJ9E,GAAerB,EAAKG,KAAKC,aAAaiB,YACxC,OACEmE,EAAAxE,EAAAC,cAACmF,EAAApF,EAAD,CACEqF,eAAgB,CACdP,QAEFQ,eAAgB,CACdC,MAAO,4BAETlG,MAAOA,EACPmG,cAAa,QAAUxG,EAAKG,KAAKC,aAAaC,MAC9C0F,KAAM,CACJ,CACEU,KAAM,cACNC,QAASP,IAGVQ,OACCX,EAASY,OAAS,EACd,CACEH,KAAM,WACNC,QAASV,EAASa,KAAK,OAEzB,IAELF,OAAOZ,IAEVP,EAAAxE,EAAAC,cAAA,QAAMmB,IAAI,aAAa0E,KAAMC,qBAAW,kBACxCvB,EAAAxE,EAAAC,cAAA,QAAMmB,IAAI,aAAa0E,KAAMC,qBAAW,wBACxCvB,EAAAxE,EAAAC,cAAA,QACEmB,IAAI,aACJ0E,KAAMC,qBAAW,wBACjBC,cAAA,MApCVhH,KAAAiH,IA6CJpB,EAAIqB,aAAe,CACjBpB,KAAM,KACNC,KAAM,GACNC,SAAU,IAGZH,EAAI9B,UAAY,CACd1C,YAAa2C,IAAUE,OACvB4B,KAAM9B,IAAUE,OAChB6B,KAAM/B,IAAUmD,MAChBnB,SAAUhC,IAAUoD,QAAQpD,IAAUE,QACtC7D,MAAO2D,IAAUE,OAAOC,YAGX0B,MAEf,IAAMK,EAAY","file":"component---src-templates-blog-post-js-12cd2895f8016a416b28.js","sourcesContent":["import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nfunction Bio() {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author } = data.site.siteMetadata\n        return (\n          <div>\n            <Image fixed={data.avatar.childImageSharp.fixed} alt={author} />\n            <p>\n              Written by <strong>{author}</strong> who lives and works in San\n              Francisco building useful things.{' '}\n              <a href={`https://twitter.com/${social.twitter}`}>\n                You should follow him on Twitter\n              </a>\n            </p>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query BioQuery {\n    avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`\n\nexport default Bio\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Prism from 'prismjs'\n\nimport Bio from '../components/bio'\nimport Layout from '../components/layout'\nimport SEO from '../components/head'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n    let highlightedMarkup\n    if (post.frontmatter.markup) {\n      highlightedMarkup = Prism.highlight(\n        post.frontmatter.markup,\n        Prism.languages.markup,\n        'markup'\n      )\n    } else {\n      highlightedMarkup = ''\n    }\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\n        <h1>{post.frontmatter.title}</h1>\n        <p />\n        <div dangerouslySetInnerHTML={{ __html: post.frontmatter.markup }} />\n        <pre>\n          <code\n            className=\"language-markup\"\n            dangerouslySetInnerHTML={{ __html: highlightedMarkup }}\n          />\n        </pre>\n        <hr />\n\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      frontmatter {\n        title\n        markup\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nclass Layout extends React.Component {\n  render() {\n    const { location, title, children } = this.props\n    const rootPath = `${__PATH_PREFIX__}/`\n    let header\n\n    if (location.pathname === rootPath) {\n      header = (\n        <h1>\n          <Link to={'/'}>{title}</Link>\n        </h1>\n      )\n    } else {\n      header = (\n        <h3>\n          <Link\n            style={{\n              boxShadow: 'none',\n              textDecoration: 'none',\n              color: 'inherit',\n            }}\n            to={'/'}\n          >\n            {title}\n          </Link>\n        </h3>\n      )\n    }\n    return (\n      <div>\n        {header}\n        {children}\n      </div>\n    )\n  }\n}\n\nexport default Layout\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql, withPrefix } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            bodyAttributes={{\n              class: 'spectrum spectrum--light',\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: 'keywords',\n                      content: keywords.join(', '),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          >\n            <link rel=\"stylesheet\" href={withPrefix('css/docs.css')} />\n            <link rel=\"stylesheet\" href={withPrefix('spectrum-light.css')} />\n            <link\n              rel=\"stylesheet\"\n              href={withPrefix('css/vendor/prism.css')}\n              data-prism\n            />\n          </Helmet>\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}